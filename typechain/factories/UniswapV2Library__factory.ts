/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { UniswapV2Library } from "../UniswapV2Library";

export class UniswapV2Library__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<UniswapV2Library> {
    return super.deploy(overrides || {}) as Promise<UniswapV2Library>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UniswapV2Library {
    return super.attach(address) as UniswapV2Library;
  }
  connect(signer: Signer): UniswapV2Library__factory {
    return super.connect(signer) as UniswapV2Library__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2Library {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2Library;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsIn",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x610a2e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063192128b214610045578063bb7b9c761461006e575b600080fd5b610058610053366004610750565b610081565b6040516100659190610888565b60405180910390f35b61005861007c366004610750565b61021c565b60606002825110156100da5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064015b60405180910390fd5b815167ffffffffffffffff8111156100f4576100f46109e2565b60405190808252806020026020018201604052801561011d578160200160208202803683370190505b509050828160018351610130919061096d565b81518110610140576101406109cc565b60200260200101818152505060006001835161015c919061096d565b90505b8015610214576000806101af878661017860018761096d565b81518110610188576101886109cc565b60200260200101518786815181106101a2576101a26109cc565b6020026020010151610392565b915091506101d78484815181106101c8576101c86109cc565b60200260200101518383610461565b846101e360018661096d565b815181106101f3576101f36109cc565b6020026020010181815250505050808061020c90610984565b91505061015f565b509392505050565b60606002825110156102705760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064016100d1565b815167ffffffffffffffff81111561028a5761028a6109e2565b6040519080825280602002602001820160405280156102b3578160200160208202803683370190505b50905082816000815181106102ca576102ca6109cc565b60200260200101818152505060005b600183516102e7919061096d565b8110156102145760008061032d87868581518110610307576103076109cc565b60200260200101518786600161031d9190610914565b815181106101a2576101a26109cc565b91509150610355848481518110610346576103466109cc565b60200260200101518383610546565b84610361856001610914565b81518110610371576103716109cc565b6020026020010181815250505050808061038a9061099b565b9150506102d9565b60008060006103a18585610625565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156103e057600080fd5b505afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104189190610838565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461044f578082610452565b81815b90999098509650505050505050565b60008084116104c75760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b60648201526084016100d1565b6000831180156104d75750600082115b6104f35760405162461bcd60e51b81526004016100d1906108cc565b60006104ff858561094e565b61050b906103e861094e565b90506000610519868561096d565b610525906103e561094e565b9050610531818361092c565b61053c906001610914565b9695505050505050565b60008084116105ab5760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b60648201526084016100d1565b6000831180156105bb5750600082115b6105d75760405162461bcd60e51b81526004016100d1906108cc565b60006105e5856103e561094e565b905060006105f3848361094e565b9050600082610604876103e861094e565b61060e9190610914565b905061061a818361092c565b979650505050505050565b600080826001600160a01b0316846001600160a01b031614156106985760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b60648201526084016100d1565b826001600160a01b0316846001600160a01b0316106106b85782846106bb565b83835b90925090506001600160a01b0382166107165760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016100d1565b9250929050565b80356001600160a01b038116811461073457600080fd5b919050565b80516001600160701b038116811461073457600080fd5b60008060006060848603121561076557600080fd5b61076e8461071d565b92506020808501359250604085013567ffffffffffffffff8082111561079357600080fd5b818701915087601f8301126107a757600080fd5b8135818111156107b9576107b96109e2565b8060051b604051601f19603f830116810181811085821117156107de576107de6109e2565b604052828152858101935084860182860187018c10156107fd57600080fd5b600095505b83861015610827576108138161071d565b855260019590950194938601938601610802565b508096505050505050509250925092565b60008060006060848603121561084d57600080fd5b61085684610739565b925061086460208501610739565b9150604084015163ffffffff8116811461087d57600080fd5b809150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156108c0578351835292840192918401916001016108a4565b50909695505050505050565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b60008219821115610927576109276109b6565b500190565b60008261094957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610968576109686109b6565b500290565b60008282101561097f5761097f6109b6565b500390565b600081610993576109936109b6565b506000190190565b60006000198214156109af576109af6109b6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122050cf36656fad831719909a3105f358eacdb25fa2f179a26caf7a42e37781285b64736f6c63430008070033";
