/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { EIP712Base } from "../EIP712Base";

export class EIP712Base__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    name: string,
    version: string,
    overrides?: Overrides
  ): Promise<EIP712Base> {
    return super.deploy(name, version, overrides || {}) as Promise<EIP712Base>;
  }
  getDeployTransaction(
    name: string,
    version: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(name, version, overrides || {});
  }
  attach(address: string): EIP712Base {
    return super.attach(address) as EIP712Base;
  }
  connect(signer: Signer): EIP712Base__factory {
    return super.connect(signer) as EIP712Base__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EIP712Base {
    return new Contract(address, _abi, signerOrProvider) as EIP712Base;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161028638038061028683398101604081905261002f91610171565b6040518060800160405280604f8152602001610237604f913980519060200120828051906020012082805190602001203061006e6100c160201b60201c565b60408051602081019690965285019390935260608401919091526001600160a01b0316608083015260a082015260c0016040516020818303038152906040528051906020012060008190555050506101ea565b4690565b600082601f8301126100d657600080fd5b81516001600160401b03808211156100f0576100f06101d4565b604051601f8301601f19908116603f01168101908282118183101715610118576101186101d4565b8160405283815260209250868385880101111561013457600080fd5b600091505b838210156101565785820183015181830184015290820190610139565b838211156101675760008385830101525b9695505050505050565b6000806040838503121561018457600080fd5b82516001600160401b038082111561019b57600080fd5b6101a7868387016100c5565b935060208501519150808211156101bd57600080fd5b506101ca858286016100c5565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b603f806101f86000396000f3fe6080604052600080fdfea26469706673582212206bdb03e119334d4d2e32a3c3c9ee74387db688421323bc41ae1feb2808f1238564736f6c63430008070033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429";
