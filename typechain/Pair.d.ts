/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PairInterface extends ethers.utils.Interface {
  functions: {
    "getAmountOut(uint256,address)": FunctionFragment;
    "getReserves()": FunctionFragment;
    "metadata()": FunctionFragment;
    "skim(address)": FunctionFragment;
    "swap(uint256,uint256,address,bytes)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "metadata", values?: undefined): string;
  encodeFunctionData(functionFragment: "skim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;

  events: {};
}

export class Pair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PairInterface;

  functions: {
    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAmountOut(uint256,address)"(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReserves(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    metadata(overrides?: CallOverrides): Promise<{
      dec0: BigNumber;
      dec1: BigNumber;
      r0: BigNumber;
      r1: BigNumber;
      st: boolean;
      t0: string;
      t1: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: string;
      6: string;
    }>;

    "metadata()"(overrides?: CallOverrides): Promise<{
      dec0: BigNumber;
      dec1: BigNumber;
      r0: BigNumber;
      r1: BigNumber;
      st: boolean;
      t0: string;
      t1: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: string;
      6: string;
    }>;

    skim(to: string, overrides?: Overrides): Promise<ContractTransaction>;

    "skim(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token0(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token0()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    token1(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token1()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  getAmountOut(
    amountIn: BigNumberish,
    tokenIn: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountOut(uint256,address)"(
    amountIn: BigNumberish,
    tokenIn: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserves(overrides?: CallOverrides): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  "getReserves()"(overrides?: CallOverrides): Promise<{
    reserve0: BigNumber;
    reserve1: BigNumber;
    blockTimestampLast: number;
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  metadata(overrides?: CallOverrides): Promise<{
    dec0: BigNumber;
    dec1: BigNumber;
    r0: BigNumber;
    r1: BigNumber;
    st: boolean;
    t0: string;
    t1: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
    5: string;
    6: string;
  }>;

  "metadata()"(overrides?: CallOverrides): Promise<{
    dec0: BigNumber;
    dec1: BigNumber;
    r0: BigNumber;
    r1: BigNumber;
    st: boolean;
    t0: string;
    t1: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
    5: string;
    6: string;
  }>;

  skim(to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "skim(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swap(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(uint256,uint256,address,bytes)"(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token0(overrides?: CallOverrides): Promise<string>;

  "token0()"(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  "token1()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,address)"(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    metadata(overrides?: CallOverrides): Promise<{
      dec0: BigNumber;
      dec1: BigNumber;
      r0: BigNumber;
      r1: BigNumber;
      st: boolean;
      t0: string;
      t1: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: string;
      6: string;
    }>;

    "metadata()"(overrides?: CallOverrides): Promise<{
      dec0: BigNumber;
      dec1: BigNumber;
      r0: BigNumber;
      r1: BigNumber;
      st: boolean;
      t0: string;
      t1: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: string;
      6: string;
    }>;

    skim(to: string, overrides?: CallOverrides): Promise<void>;

    "skim(address)"(to: string, overrides?: CallOverrides): Promise<void>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    token0(overrides?: CallOverrides): Promise<string>;

    "token0()"(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    "token1()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountOut(uint256,address)"(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    metadata(overrides?: CallOverrides): Promise<BigNumber>;

    "metadata()"(overrides?: CallOverrides): Promise<BigNumber>;

    skim(to: string, overrides?: Overrides): Promise<BigNumber>;

    "skim(address)"(to: string, overrides?: Overrides): Promise<BigNumber>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    "token0()"(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    "token1()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountOut(uint256,address)"(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "metadata()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skim(to: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "skim(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(uint256,uint256,address,bytes)"(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token0()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
