/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ExchangeInterface extends ethers.utils.Interface {
  functions: {
    "adminSetExchangeRate(uint256)": FunctionFragment;
    "adminWithdraw(uint256)": FunctionFragment;
    "change(uint256)": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "owner()": FunctionFragment;
    "rateDenominator()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenIn()": FunctionFragment;
    "tokenInReserve()": FunctionFragment;
    "tokenOut()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adminSetExchangeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "change",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenIn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenInReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenOut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminSetExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "change", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenInReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Exchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ExchangeInterface;

  functions: {
    adminSetExchangeRate(
      _exchangeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminSetExchangeRate(uint256)"(
      _exchangeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adminWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adminWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    change(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "change(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    rateDenominator(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "rateDenominator()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    tokenIn(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tokenIn()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenInReserve(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "tokenInReserve()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tokenOut(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tokenOut()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  adminSetExchangeRate(
    _exchangeRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminSetExchangeRate(uint256)"(
    _exchangeRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adminWithdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adminWithdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  change(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "change(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rateDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  "rateDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  tokenIn(overrides?: CallOverrides): Promise<string>;

  "tokenIn()"(overrides?: CallOverrides): Promise<string>;

  tokenInReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenInReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenOut(overrides?: CallOverrides): Promise<string>;

  "tokenOut()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    adminSetExchangeRate(
      _exchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminSetExchangeRate(uint256)"(
      _exchangeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adminWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    change(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "change(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rateDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "rateDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    tokenIn(overrides?: CallOverrides): Promise<string>;

    "tokenIn()"(overrides?: CallOverrides): Promise<string>;

    tokenInReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenInReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOut(overrides?: CallOverrides): Promise<string>;

    "tokenOut()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    adminSetExchangeRate(
      _exchangeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminSetExchangeRate(uint256)"(
      _exchangeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adminWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adminWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    change(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "change(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rateDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "rateDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    tokenIn(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenIn()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenInReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenInReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOut(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenOut()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminSetExchangeRate(
      _exchangeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminSetExchangeRate(uint256)"(
      _exchangeRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adminWithdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adminWithdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    change(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "change(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rateDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tokenIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenIn()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenInReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenInReserve()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenOut()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
