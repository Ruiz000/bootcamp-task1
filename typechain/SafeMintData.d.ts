/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SafeMintDataInterface extends ethers.utils.Interface {
  functions: {
    "ARBITRATOR_ROLE()": FunctionFragment;
    "AUDITOR_ROLE()": FunctionFragment;
    "auditPrice()": FunctionFragment;
    "auditRecord(uint256,uint256)": FunctionFragment;
    "challengeArr(uint256)": FunctionFragment;
    "challengePrice()": FunctionFragment;
    "challengeRecord(uint256,uint256)": FunctionFragment;
    "contractAddress(address)": FunctionFragment;
    "duration()": FunctionFragment;
    "feeRecord(uint256)": FunctionFragment;
    "lockedArr(uint256)": FunctionFragment;
    "passedArr(uint256)": FunctionFragment;
    "pendingArr(uint256)": FunctionFragment;
    "projectArr(uint256)": FunctionFragment;
    "projectId(bytes32)": FunctionFragment;
    "projectPrice()": FunctionFragment;
    "rejectArr(uint256)": FunctionFragment;
    "user(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ARBITRATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auditPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auditRecord",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRecord",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "passedArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projectPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "user", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ARBITRATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auditPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auditRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedArr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "passedArr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingArr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectArr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rejectArr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "user", data: BytesLike): Result;

  events: {
    "ArbitrateProject(string,address,uint8)": EventFragment;
    "AuditProject(string,address,uint256,string,uint8)": EventFragment;
    "ChallengeProject(string,address,uint256,string)": EventFragment;
    "EditProject(string,uint256,uint256,string)": EventFragment;
    "SaveProject(string,address,address,uint256,uint256,uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArbitrateProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuditProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EditProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaveProject"): EventFragment;
}

export class SafeMintData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SafeMintDataInterface;

  functions: {
    ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ARBITRATOR_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    AUDITOR_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "AUDITOR_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    auditPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "auditPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    auditRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      projectId: BigNumber;
      auditor: string;
      auditTime: BigNumber;
      comments: string;
      auditFee: BigNumber;
      status: number;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: number;
    }>;

    "auditRecord(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      projectId: BigNumber;
      auditor: string;
      auditTime: BigNumber;
      comments: string;
      auditFee: BigNumber;
      status: number;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: number;
    }>;

    challengeArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "challengeArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    challengePrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "challengePrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    challengeRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      projectId: BigNumber;
      challenger: string;
      time: BigNumber;
      comments: string;
      challengeFee: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    "challengeRecord(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      projectId: BigNumber;
      challenger: string;
      time: BigNumber;
      comments: string;
      challengeFee: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    contractAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "contractAddress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    duration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "duration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    feeRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      auditTime: BigNumber;
      auditor: string;
      value: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
    }>;

    "feeRecord(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      auditTime: BigNumber;
      auditor: string;
      value: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
    }>;

    lockedArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockedArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    passedArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "passedArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pendingArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    projectArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      owner: string;
      createTime: BigNumber;
      projectContract: string;
      startTime: BigNumber;
      endTime: BigNumber;
      ipfsAddress: string;
      projectFee: BigNumber;
      status: number;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: number;
    }>;

    "projectArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      owner: string;
      createTime: BigNumber;
      projectContract: string;
      startTime: BigNumber;
      endTime: BigNumber;
      ipfsAddress: string;
      projectFee: BigNumber;
      status: number;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: number;
    }>;

    projectId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "projectId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    projectPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "projectPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    rejectArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rejectArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    user(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "user(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "ARBITRATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  AUDITOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "AUDITOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "auditPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  auditRecord(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    projectId: BigNumber;
    auditor: string;
    auditTime: BigNumber;
    comments: string;
    auditFee: BigNumber;
    status: number;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: number;
  }>;

  "auditRecord(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    projectId: BigNumber;
    auditor: string;
    auditTime: BigNumber;
    comments: string;
    auditFee: BigNumber;
    status: number;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: number;
  }>;

  challengeArr(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "challengeArr(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  challengePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "challengePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  challengeRecord(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    projectId: BigNumber;
    challenger: string;
    time: BigNumber;
    comments: string;
    challengeFee: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: string;
    4: BigNumber;
  }>;

  "challengeRecord(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    projectId: BigNumber;
    challenger: string;
    time: BigNumber;
    comments: string;
    challengeFee: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: string;
    4: BigNumber;
  }>;

  contractAddress(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "contractAddress(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecord(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    auditTime: BigNumber;
    auditor: string;
    value: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
  }>;

  "feeRecord(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    auditTime: BigNumber;
    auditor: string;
    value: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
  }>;

  lockedArr(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "lockedArr(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  passedArr(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "passedArr(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingArr(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "pendingArr(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  projectArr(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    owner: string;
    createTime: BigNumber;
    projectContract: string;
    startTime: BigNumber;
    endTime: BigNumber;
    ipfsAddress: string;
    projectFee: BigNumber;
    status: number;
    0: string;
    1: string;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: BigNumber;
    8: number;
  }>;

  "projectArr(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    owner: string;
    createTime: BigNumber;
    projectContract: string;
    startTime: BigNumber;
    endTime: BigNumber;
    ipfsAddress: string;
    projectFee: BigNumber;
    status: number;
    0: string;
    1: string;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: BigNumber;
    8: number;
  }>;

  projectId(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "projectId(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  projectPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "projectPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  rejectArr(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "rejectArr(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  user(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "user(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "ARBITRATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    AUDITOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "AUDITOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "auditPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    auditRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      projectId: BigNumber;
      auditor: string;
      auditTime: BigNumber;
      comments: string;
      auditFee: BigNumber;
      status: number;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: number;
    }>;

    "auditRecord(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      projectId: BigNumber;
      auditor: string;
      auditTime: BigNumber;
      comments: string;
      auditFee: BigNumber;
      status: number;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: number;
    }>;

    challengeArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "challengeArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "challengePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      projectId: BigNumber;
      challenger: string;
      time: BigNumber;
      comments: string;
      challengeFee: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    "challengeRecord(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      projectId: BigNumber;
      challenger: string;
      time: BigNumber;
      comments: string;
      challengeFee: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    contractAddress(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "contractAddress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      auditTime: BigNumber;
      auditor: string;
      value: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
    }>;

    "feeRecord(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      auditTime: BigNumber;
      auditor: string;
      value: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
    }>;

    lockedArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    passedArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "passedArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      owner: string;
      createTime: BigNumber;
      projectContract: string;
      startTime: BigNumber;
      endTime: BigNumber;
      ipfsAddress: string;
      projectFee: BigNumber;
      status: number;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: number;
    }>;

    "projectArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      owner: string;
      createTime: BigNumber;
      projectContract: string;
      startTime: BigNumber;
      endTime: BigNumber;
      ipfsAddress: string;
      projectFee: BigNumber;
      status: number;
      0: string;
      1: string;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: BigNumber;
      8: number;
    }>;

    projectId(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "projectId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "projectPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    rejectArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rejectArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "user(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    ArbitrateProject(
      name: string | null,
      arbitrator: string | null,
      status: null
    ): EventFilter;

    AuditProject(
      name: string | null,
      auditor: string | null,
      auditPrice: null,
      comments: null,
      status: null
    ): EventFilter;

    ChallengeProject(
      name: string | null,
      challenger: string | null,
      challengePrice: null,
      comments: null
    ): EventFilter;

    EditProject(
      name: string | null,
      startTime: null,
      endTime: null,
      ipfsAddress: null
    ): EventFilter;

    SaveProject(
      name: string | null,
      owner: string | null,
      projectContract: string | null,
      startTime: null,
      endTime: null,
      projectPrice: null,
      ipfsAddress: null,
      projectId: null
    ): EventFilter;
  };

  estimateGas: {
    ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ARBITRATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    AUDITOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "AUDITOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "auditPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    auditRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "auditRecord(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengeArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "challengeArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "challengePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "challengeRecord(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractAddress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    "duration()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeRecord(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    passedArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "passedArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "projectArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectId(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "projectId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "projectPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    rejectArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rejectArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    user(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "user(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ARBITRATOR_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AUDITOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "AUDITOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auditPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auditPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auditRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "auditRecord(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengeArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "challengeArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "challengePrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengeRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "challengeRecord(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractAddress(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "duration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeRecord(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    passedArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "passedArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectId(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projectId(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "projectPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rejectArr(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "user(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
