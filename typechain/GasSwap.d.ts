/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GasSwapInterface extends ethers.utils.Interface {
  functions: {
    "WGMLR()": FunctionFragment;
    "changeFeeAddress(address)": FunctionFragment;
    "changeFeePercent(uint256)": FunctionFragment;
    "changeRouter(address)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "swap(bytes)": FunctionFragment;
    "tokenWhitelist(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistToken(address,bool)": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
    "withdrawToken(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WGMLR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "swap", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "tokenWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WGMLR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class GasSwap extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GasSwapInterface;

  functions: {
    WGMLR(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WGMLR()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    changeFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeFeeAddress(address)"(
      newFeeAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeFeePercent(uint256)"(
      newFeePercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeRouter(
      newTarget: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeRouter(address)"(
      newTarget: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "feeAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    feePercent(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "feePercent()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      0: BigNumber;
    }>;

    "getNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      nonce: BigNumber;
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "router()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    swap(
      swapCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(bytes)"(
      swapCallData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "tokenWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whitelistToken(
      tokenAddress: string,
      whitelisted: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "whitelistToken(address,bool)"(
      tokenAddress: string,
      whitelisted: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawETH(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  WGMLR(overrides?: CallOverrides): Promise<string>;

  "WGMLR()"(overrides?: CallOverrides): Promise<string>;

  changeFeeAddress(
    newFeeAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeFeeAddress(address)"(
    newFeeAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeFeePercent(
    newFeePercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeFeePercent(uint256)"(
    newFeePercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeRouter(
    newTarget: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeRouter(address)"(
    newTarget: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  "feeAddress()"(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  "feePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  swap(
    swapCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(bytes)"(
    swapCallData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "tokenWhitelist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whitelistToken(
    tokenAddress: string,
    whitelisted: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "whitelistToken(address,bool)"(
    tokenAddress: string,
    whitelisted: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawETH(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawETH(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    WGMLR(overrides?: CallOverrides): Promise<string>;

    "WGMLR()"(overrides?: CallOverrides): Promise<string>;

    changeFeeAddress(
      newFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeFeeAddress(address)"(
      newFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFeePercent(
      newFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeFeePercent(uint256)"(
      newFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRouter(newTarget: string, overrides?: CallOverrides): Promise<void>;

    "changeRouter(address)"(
      newTarget: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    "feeAddress()"(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "feePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    swap(
      swapCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swap(bytes)"(
      swapCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "tokenWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistToken(
      tokenAddress: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistToken(address,bool)"(
      tokenAddress: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawETH(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    MetaTransactionExecuted(
      userAddress: null,
      relayerAddress: null,
      functionSignature: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    WGMLR(overrides?: CallOverrides): Promise<BigNumber>;

    "WGMLR()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeFeeAddress(address)"(
      newFeeAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeFeePercent(uint256)"(
      newFeePercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeRouter(newTarget: string, overrides?: Overrides): Promise<BigNumber>;

    "changeRouter(address)"(
      newTarget: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "feeAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    "feePercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(swapCallData: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "swap(bytes)"(
      swapCallData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    whitelistToken(
      tokenAddress: string,
      whitelisted: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "whitelistToken(address,bool)"(
      tokenAddress: string,
      whitelisted: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawETH(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WGMLR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WGMLR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeFeeAddress(
      newFeeAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeFeeAddress(address)"(
      newFeeAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeFeePercent(uint256)"(
      newFeePercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeRouter(
      newTarget: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeRouter(address)"(
      newTarget: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      swapCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(bytes)"(
      swapCallData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenWhitelist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whitelistToken(
      tokenAddress: string,
      whitelisted: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "whitelistToken(address,bool)"(
      tokenAddress: string,
      whitelisted: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
